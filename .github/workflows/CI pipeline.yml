name: QA Toolkit

on:
  pull_request:
    paths:
      - '**/*.ts'
      - '**/*.js'
      - '**/*.tsx'
      - 'coverage/coverage-summary.json'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test-unit:
    runs-on: ubuntu-latest
    outputs:
      jest_status: ${{ steps.jest.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests and generate coverage
        id: jest
        run: npm run test:unit -- --coverage > jest-output.txt || true

      - name: Upload Jest test report
        uses: actions/upload-artifact@v4
        with:
          name: jest-report
          path: jest-output.txt

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json

  test-cypress:
    runs-on: ubuntu-latest
    outputs:
      e2e_status: ${{ steps.e2e.outcome }}
      comp_status: ${{ steps.comp.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress E2E tests
        id: e2e
        run: npx cypress run --e2e > e2e-output.txt || true

      - name: Run Cypress Component tests
        id: comp
        run: npx cypress run --component > component-output.txt || true

      - name: Upload Cypress test reports
        uses: actions/upload-artifact@v4
        with:
          name: cypress-output
          path: |
            e2e-output.txt
            component-output.txt

  post-results:
    needs: [test-unit, test-cypress]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all test outputs
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Post combined test results to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const stripAnsi = str => str.replace(/\u001b\[[0-9;]*m/g, '');

            const jestOutput = stripAnsi(fs.readFileSync('artifacts/jest-report/jest-output.txt', 'utf8'));
            const e2eOutput = stripAnsi(fs.readFileSync('artifacts/cypress-output/e2e-output.txt', 'utf8'));
            const compOutput = stripAnsi(fs.readFileSync('artifacts/cypress-output/component-output.txt', 'utf8'));

            const e2ePassed = e2eOutput.includes('All specs passed!');
            const compPassed = compOutput.includes('All specs passed!');
            const jestPassed = jestOutput.toLowerCase().includes('pass');

            const body = [
              '## ‚úÖ CI Test Summary',
              '',
              `**Jest Tests:** ${jestPassed ? '‚úÖ Passed' : '‚ùå Issues Found'}`,
              '```txt',
              jestOutput.slice(-1500),
              '```',
              '',
              `**Cypress E2E:** ${e2ePassed ? '‚úÖ Passed' : '‚ùå Issues Found'}`,
              '```txt',
              e2eOutput.slice(-1500),
              '```',
              '',
              `**Cypress Component:** ${compPassed ? '‚úÖ Passed' : '‚ùå Issues Found'}`,
              '```txt',
              compOutput.slice(-1500),
              '```'
            ].join('\n');

            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  ai-coverage-audit:
    needs: test-unit
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage/

      - name: Run AI coverage analysis
        run: |
          chmod +x scripts/*.sh
          ./scripts/github-coverage-bot.sh coverage/coverage-summary.json

      - name: Post GPT report as PR comment
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -f body="$(cat .gpt-comment.md)" \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

  notify-slack:
    needs: [post-results, ai-coverage-audit]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "üîî QA CI Summary for PR #${{ github.event.pull_request.number }}\nJest ‚úÖ ${{ needs.test-unit.result }}\nCypress ‚úÖ ${{ needs.test-cypress.result }}\nAI Coverage Posted ‚úÖ"
          }' $SLACK_WEBHOOK_URL
