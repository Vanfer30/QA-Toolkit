name: QA Toolkit

on:
  pull_request:
    paths:
      - '**/*.ts'
      - '**/*.js'
      - '**/*.tsx'
      - 'coverage/coverage-summary.json'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Run Jest tests and generate coverage
        run: npm run test:unit -- --coverage
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json

    test-cypress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress E2E tests
        run: npx cypress run --e2e > e2e-output.txt || true

      - name: Run Cypress Component tests
        run: npx cypress run --component > component-output.txt || true

      - name: Post Cypress Test Results to PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            function stripAnsi(str) {
              return str.replace(/\u001b\[.*?m/g, '');
            }

            const e2eExists = fs.existsSync('e2e-output.txt');
            const compExists = fs.existsSync('component-output.txt');

            const e2eRaw = e2eExists ? fs.readFileSync('e2e-output.txt', 'utf8') : '';
            const compRaw = compExists ? fs.readFileSync('component-output.txt', 'utf8') : '';

            const e2eOutput = e2eExists ? stripAnsi(e2eRaw) : '‚ö†Ô∏è No E2E test output found.';
            const compOutput = compExists ? stripAnsi(compRaw) : '‚ö†Ô∏è No Component test output found.';

            const e2ePassed = e2eOutput.includes('All specs passed!');
            const compPassed = compOutput.includes('All specs passed!');

            const body = [
              '## üß™ Cypress Test Results',
              '',
              `### üîπ E2E Tests ${e2ePassed ? '‚úÖ' : '‚ùå'}`,
              '```txt',
              e2eOutput.slice(-2000),
              '```',
              '',
              `### üî∏ Component Tests ${compPassed ? '‚úÖ' : '‚ùå'}`,
              '```txt',
              compOutput.slice(-2000),
              '```',
            ].join('\n');

            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });



  ai-coverage-audit:
    needs: test-unit
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage/
      - name: Run AI coverage analysis
        run: |
          chmod +x scripts/*.sh
          ./scripts/github-coverage-bot.sh coverage/coverage-summary.json
      - name: Post GPT report as PR comment (via REST API)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Posting PR comment via gh api..."
          gh api "repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
          -f body="$(cat .gpt-comment.md)" || echo "Comment failed"
